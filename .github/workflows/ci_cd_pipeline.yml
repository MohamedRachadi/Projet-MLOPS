name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Installer Python et dépendances
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 3 : Démarrer MLflow
      - name: Start MLflow server
        run: |
          nohup mlflow server \
            --backend-store-uri sqlite:///mlflow.db \
            --host 127.0.0.1 \
            --port 5000 &
        timeout-minutes: 2

      # Étape 3 : Démarrer l'API
      - name: Start API server
        run: |
          uvicorn src.api:app --host 127.0.0.1 --port 8000 &
        timeout-minutes: 2

      # Étape 4 : Attendre que l'API soit prête
      - name: Wait for API
        run: sleep 10

      - name: Check API status
        run: |
          curl -X GET http://127.0.0.1:8000/docs || exit 1

      # Étape 5 : Exécuter le test API
      - name: Run API test
        run: pytest tests/test_api.py 

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ml-api:latest .

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/ml-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          docker pull ${{ secrets.DOCKER_USERNAME }}/ml-api:latest
          docker stop ml-api || true
          docker rm ml-api || true
          docker run -d -p 8000:8000 --name ml-api ${{ secrets.DOCKER_USERNAME }}/ml-api:latest
          EOF