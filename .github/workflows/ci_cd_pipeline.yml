name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline sur un push sur la branche principale
  pull_request:
    branches:
      - main  # Déclenche le pipeline lors d'un PR vers la branche principale

jobs:
  # 1ère étape : Tests
  test:
    runs-on: ubuntu-latest  # Utilisation d'Ubuntu pour exécuter les tests

    steps:
      # Vérifier le code du repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11  # Utiliser la version de Python que vous utilisez

      # Installer les dépendances
      - name: Install dependencies
        run: |
          python -m venv venv  # Crée un environnement virtuel
          source venv/bin/activate  # Active l'environnement virtuel
          pip install -r requirements.txt  # Installe les dépendances à partir de requirements.txt

      # Construire et lancer l'API dans Docker (nouvelle image et port)
      - name: Build and run FastAPI app in Docker
        run: |
          docker build -t mlops-api .  # Construire l'image Docker de l'API
          docker run -d -p 5000:5000 --name api-container mlops-api  # Lancer l'API en mode détaché sur le port 5000

      # Attendre que l'API soit prête avant de tester
      - name: Wait for API to be ready
        run: |
          container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api-container)
          echo "Waiting for API to be ready at http://$container_ip:5000"
          for i in {1..30}; do
            if curl -s http://$container_ip:5000/predict > /dev/null; then
              echo "API is up and running"
              break
            else
              echo "Waiting for API to be ready..."
              sleep 5
            fi
          done

      # Exécuter les tests unitaires avec Pytest
      - name: Run unit tests with Pytest
        run: |
          source venv/bin/activate  # Activer l'environnement virtuel
          export API_URL=http://$container_ip:5000/predict  # Définir l'URL de l'API
          pytest --maxfail=1 --disable-warnings -q -n 4  # Exécuter les tests avec Pytest

      # Afficher les logs du conteneur pour débogage
      - name: View logs of the FastAPI container
        run: |
          docker logs api-container

      # Nettoyer les conteneurs Docker après le déploiement
      - name: Clean up Docker containers
        run: |
          docker stop api-container  # Arrêter le conteneur Docker
          docker rm api-container  # Supprimer le conteneur Docker

  # 2ème étape : Build et déploiement de l'API
  deploy:
    needs: test  # Cette étape dépend de l'étape 'test'
    runs-on: ubuntu-latest  # Utilisation d'Ubuntu pour exécuter le déploiement

    steps:
      # Vérifier le code du repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11  # Utiliser la version de Python que vous utilisez

      # Installer les dépendances
      - name: Install dependencies
        run: |
          python -m venv venv  # Crée un environnement virtuel
          source venv/bin/activate  # Active l'environnement virtuel
          pip install -r requirements.txt  # Installe les dépendances à partir de requirements.txt

      # Construire et lancer l'API dans Docker
      - name: Build and run FastAPI app in Docker
        run: |
          docker build -t mlops-api .  # Construire l'image Docker de l'API
          docker run -d -p 5000:5000 --name api-container mlops-api  # Lancer l'API en mode détaché sur le port 5000

      # Vérification des conteneurs Docker en cours d'exécution
      - name: List Docker containers
        run: docker ps

      # Récupérer l'IP du conteneur et tester l'API
      - name: Get container IP and check API
        run: |
          container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api-container)
          echo "Container IP is: $container_ip"
          curl -f http://$container_ip:5000/predict || exit 1  # Teste l'API sur l'IP du conteneur

      # Afficher les logs du conteneur pour débogage
      - name: View logs of the FastAPI container
        run: |
          docker logs api-container

      # Nettoyer les conteneurs Docker après le déploiement
      - name: Clean up Docker containers
        run: |
          docker stop api-container  # Arrêter le conteneur Docker
          docker rm api-container  # Supprimer le conteneur Docker
