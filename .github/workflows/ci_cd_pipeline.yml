name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Installer Python et les dépendances
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 3 : Démarrer le serveur MLflow
      - name: Start MLflow server
        run: |
          nohup mlflow server --backend-store-uri sqlite:///mlflow.db --host 127.0.0.1 --port 5000 &
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000

      # Étape 4 : Attendre que le serveur MLflow soit prêt
      - name: Wait for MLflow server to start
        run: sleep 10

      # *Nouvelle Étape : Exécuter le script main.py*
      - name: Run main.py to train and register the model
        run: |
          cd src
          python main.py
          cd ..
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000

      - name: Start API
        run: |
          cd src
          nohup python -m uvicorn api:app --host 0.0.0.0 --port 8000 &
          cd ..
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000

      # Étape 5 : Exécuter les tests sur le modèle
      - name: Run model tests
        run: pytest tests/test_model.py --disable-warnings
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000

      # Étape 5 : Exécuter les tests sur l'API
      - name: Run API tests
        run: pytest tests/test_api.py --disable-warnings
        env:
          MLFLOW_TRACKING_URI: http://127.0.0.1:5000

  #docker-build-and-push:
  #  runs-on: ubuntu-latest
  #  needs: test

  #  steps:
      # Étape 1 : Récupérer le code source
  #    - name: Checkout repository
  #      uses: actions/checkout@v3

      # Étape 2 : Se connecter à DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Étape 3 : Construire l'image Docker
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/streamlit-app:latest .

      # Étape 4 : Pousser l'image Docker vers DockerHub
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/streamlit-app:latest