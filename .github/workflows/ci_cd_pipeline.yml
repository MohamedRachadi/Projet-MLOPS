name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline sur un push sur la branche principale
  pull_request:
    branches:
      - main  # Déclenche le pipeline lors d'un PR vers la branche principale

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest  # Utilisation d'Ubuntu pour exécuter les tests

    steps:
      # Étape 1: Vérifier le code du repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2: Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11  # Utiliser la version de Python que vous utilisez

      # Étape 3: Installer les dépendances
      - name: Install dependencies
        run: |
          python -m venv venv  # Crée un environnement virtuel
          source venv/bin/activate  # Active l'environnement virtuel
          pip install -r requirements.txt  # Installe les dépendances à partir de requirements.txt

      # Étape 4: Construire et lancer l'API dans Docker
      - name: Build and run FastAPI app in Docker
        run: |
          docker build -t mlops-api .  # Construire l'image Docker de l'API
          docker run -d -p 5000:5000 mlops-api  # Lancer l'API en mode détaché sur le port 5000

      # Étape pour vérifier les conteneurs Docker en cours d'exécution
      - name: List Docker containers
        run: docker ps

      - name: Wait for the API to be ready
        run: |
          sleep 20

      # Étape de débogage: Vérification si le service est disponible sur localhost:5000
      - name: Check if FastAPI is running
        run: |
          curl -f http://host.docker.internal:5000/predict || exit 1

      # Étape 5: Exécuter les tests unitaires avec Pytest
      - name: Run unit tests with Pytest
        run: |
          source venv/bin/activate  # Activer l'environnement virtuel
          pytest --maxfail=1 --disable-warnings -q  # Exécuter les tests avec Pytest

      # Étape 6: Tester l'API servie
      - name: Test the FastAPI API serving
        run: |
          # Exécuter le test de l'API (doit appeler votre API déployée pour vérifier si elle fonctionne correctement)
          python tests/test_api.py  # Assurez-vous que test_api.py fonctionne correctement

      # Étape 7: Nettoyer les containers Docker après les tests
      - name: Clean up Docker containers
        run: |
          docker stop $(docker ps -q)  # Arrête tous les containers Docker en cours
          docker rm $(docker ps -aq)  # Supprime tous les containers Docker
